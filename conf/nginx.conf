worker_processes 1;
user ec2-user;

events {
    worker_connections 1024;
}

http {
    lua_shared_dict resource_metrics 10m;

    # Frontend upstream
    upstream frontend {
        server 192.168.3.120:3000;
        server 192.168.1.123:3000;
    }

    # Backend upstream (used for dynamic routing)
    upstream backend {
        server 192.168.3.120:8000;
        server 192.168.1.123:8000;
    }

    server {
        listen 80;

        # Frontend (React)
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Backend (Node.js API with health check)
        location /api/ {
            access_by_lua_block {
                local http = require "resty.http"
                local cjson = require "cjson"
                local servers = {
                    { ip = "192.168.3.120", port = 8000 },
                    { ip = "192.168.1.123", port = 8000 }
                }

                -- Variables to track the best server
                local selected_server = nil
                local min_load = 100 -- Start with a high load percentage

                -- Check health of all servers
                for _, server in ipairs(servers) do
                    local url = "http://" .. server.ip .. ":" .. server.port .. "/api/checkhealth"
                    local httpc = http.new()

                    local res, err = httpc:request_uri(url, { method = "GET", timeout = 2000 })

                    if not res then
                        ngx.log(ngx.ERR, "Failed to fetch health data from ", url, ": ", err)
                    else
                        local health_data = cjson.decode(res.body)

                        -- Check server health status and load
                        if health_data.status == "healthy" and health_data.load < min_load then
                            selected_server = server
                            min_load = health_data.load
                        end
                    end
                end

                if not selected_server then
                    ngx.log(ngx.ERR, "No healthy backend servers available")
                    ngx.exit(503) -- Service Unavailable
                end

                -- Set the selected backend dynamically
                local target = "http://" .. selected_server.ip .. ":" .. selected_server.port
                ngx.var.backend_target = target
            }

            proxy_pass $backend_target;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}

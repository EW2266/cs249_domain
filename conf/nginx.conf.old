worker_processes auto;

error_log logs/error.log debug;


events {
    worker_connections 1024;
}

http {

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" "$http_user_agent"';

    access_log logs/access.log main;

    lua_package_path "../server/?.lua;;";
    lua_shared_dict health 10m;

    server {
        listen 80;

        # API endpoint with CORS headers
        location /api/ {
            # Handle CORS preflight requests
            if ($request_method = OPTIONS) {
                add_header "Access-Control-Allow-Origin" "*";
                add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, PUT, DELETE";
                add_header "Access-Control-Allow-Headers" "Authorization, Content-Type, Accept";
                add_header "Access-Control-Max-Age" 86400;
                add_header "Content-Length" 0;
                add_header "Content-Type" "text/plain";
                return 204; # No content for preflight
            }

            # Add CORS headers for actual API requests
            add_header "Access-Control-Allow-Origin" "*"; # Or specify the domain
            add_header "Access-Control-Allow-Credentials" "true";

            init_by_lua_block {
                ngx.log(ngx.DEBUG, "Nginx is initializing Lua environment")
            }

            set $target "";

            content_by_lua_block {
                ngx.log(ngx.DEBUG, "2. Entering content_by_lua_block for URI: ", ngx.var.request_uri)
                local scriptService = require "scriptService"
                local server, err = scriptService.weighted_ip_hash(scriptService.servers.backend)
                if not server then
                ngx.log(ngx.ERR, "No valid backend server found: ", err)
                ngx.exit(502)
                else
                ngx.var.target = "http://" .. server
                end
            }

            proxy_pass $target;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header Origin $http_origin; # Forward Origin header for downstream handling
            proxy_cache_bypass $http_upgrade;
        }
    }

}

